//
//  ChaappingViewModel.swift
//  ChaappingPracticeSecond
//
//  Created by BoMin Lee on 7/23/25.
//

import Foundation
import MultipeerConnectivity
import NearbyInteraction
import SwiftUI
import SwiftData

enum DistanceState {
    case closeUpinFOV, notCloseUpInFOV, outOfFOV, unknown
}

@MainActor
@Observable
class ChaappingViewModel: NSObject {
    var hasCreatedChaap = false
    let modelContext: ModelContext
    
    /// LocationManager
    var locationManager = LocationManager.shared
    
    /// MPC
    var isConnectedWithPeer: Bool = false // PeerÏôÄ Ïó∞Í≤∞ÎêòÏñ¥ÏûàÎäîÏßÄ Ïó¨Î∂Ä
    var connectedPeer: MCPeerID? // Ïó∞Í≤∞Îêú Peer
    var isCompleted: Bool = false
    var mpcManager: MultipeerConnectivityManager?
    
    // NI
    var niSession: NISession? // Nearby Interaction Session
    var peerDiscoveryToken: NIDiscoveryToken? // PeerÏùò DiscoveryToken
    var hasSharedTokenWithPeer = false // PeerÏôÄÏùò ÌÜ†ÌÅ∞ ÍµêÌôò Ïó¨Î∂Ä
    var currentDistanceState: DistanceState = .unknown
    
    var distance: Float? // Peer Í∞ÑÏùò Í±∞Î¶¨
    let nearbyDistanceThreshold: Float = 0.2 // ÌÉúÍπÖ Î≤îÏúÑ
    
    init(modelContext: ModelContext) {
        self.modelContext = modelContext
    }
    
    func startMPC() {
        print("ChaapViewModel - startMPC()")
        
        if mpcManager != nil {
            mpcManager?.invalidate()
        }
        
        let newMPCManager = MultipeerConnectivityManager()
        newMPCManager.peerConnectedHandler = connectedToPeer
        newMPCManager.peerDataHandler = dataReceivedHandler
        newMPCManager.peerDisconnectedHandler = disconnectedFromPeer
        
        newMPCManager.start()
        self.mpcManager = newMPCManager
    }
    
    func stopMPC() {
        print("stopMPC()")
        mpcManager?.invalidate()
        mpcManager = nil  // Î∞òÎìúÏãú nil Ìï†ÎãπÏúºÎ°ú Ïù∏Ïä§ÌÑ¥Ïä§ Ï†úÍ±∞
        isConnectedWithPeer = false
        connectedPeer = nil
    }
    
    func startNI() {
        print("ChaapViewModel - startNI()")
        
        // NISession ÏÉùÏÑ±
        niSession = NISession()
        // delegate ÏÑ§Ï†ï
        niSession?.delegate = self
        
        hasSharedTokenWithPeer = false
        
        if connectedPeer != nil && mpcManager != nil {
            if let myToken = niSession?.discoveryToken {
                print("myToken: \(myToken)")
                // ÌôîÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏ (Ï∞æÎäî Ï§ë)
                if !hasSharedTokenWithPeer {
                    print("ÎÇòÏùò discoveryToken Í≥µÏú†\(myToken)")
                    shareMyDiscoveryToken(token: myToken)
                }
                guard let peerToken = peerDiscoveryToken else {
                    print("peerToken ÏóÜÏùå")
                    return
                }
                print("run config")
                let config = NINearbyPeerConfiguration(peerToken: peerToken)
                niSession?.run(config)
            }  else {
                // TODO: Error - (Unable to get self discovery token)
                print("")
            }
        } else {
            print("startNI() - MPC Ïû¨Ïó∞Í≤∞ÏùÑ ÏãúÏûëÌï©ÎãàÎã§")
            print("connectedPeer: \(String(describing: connectedPeer?.displayName)) | mpc: \(String(describing: mpcManager?.description))")
            startMPC()
        }
    }
    
    // Nearby Interaction Ï¢ÖÎ£å
    func stopNI() {
        print("ChaapingViewModel - stopNI()")
        self.niSession?.pause()
        self.niSession?.invalidate()
    }
    
    // MPC Ïó∞Í≤∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏùÑ Îïå Ìò∏Ï∂ú
    func connectedToPeer(peer: MCPeerID) {
        print("MPC Connected")
        
        if connectedPeer != nil {
            return
        }
        
        mpcManager?.mpcSessionState = .connected
        connectedPeer = peer
        isConnectedWithPeer = true
        
        // NI ÏãúÏûë
        startNI()
    }
    
    /// MPC Ïó∞Í≤∞Ïù¥ ÎÅäÍ≤ºÏùÑ Îïå Ïã§Ìñâ
    func disconnectedFromPeer(peer: MCPeerID) {
        
        print("MPC Disconnected")
        if connectedPeer == peer {
            connectedPeer = nil         // Ïó∞Í≤∞Îêú Peer id Ï†úÍ±∞
            isConnectedWithPeer = false   // TODO: - ÏÉÅÌÉú Î≥ÄÍ≤Ω -> enumÏúºÎ°ú Í¥ÄÎ¶¨ÌïòÍ∏∞
        }
        
        mpcManager?.mpcSessionState = .notConnected
        print("üíã isConnectWithPeer: \(isConnectedWithPeer)")
    }
    
    /// ÏÉÅÎåÄÎ∞©Ïù¥ Î≥¥ÎÇ¥Ïò® NIDiscoveryTokenÏùÑ ÏàòÏã†ÌñàÏùÑ Îïå Ïã§Ìñâ
    func dataReceivedHandler(data: Data, peer: MCPeerID) {
        // discoveryTokenÏùÑ ÏÑúÎ°ú Í≥µÏú†ÌñàÎã§Î©¥, ni ÏãúÏûë
        print("ÏÉÅÎåÄÎ∞©Ïù¥ Î≥¥ÎÇ¥Ïò® NIDiscoveryTokenÏùÑ ÏàòÏã†ÌñàÏùÑ Îïå Ïã§Ìñâ")
        // 1. peerToken Ï†ÄÏû•
        guard let discoveryToken = try? NSKeyedUnarchiver.unarchivedObject(ofClass: NIDiscoveryToken.self, from: data) else {
            fatalError("Unexpectedly failed to decode discovery token.")
        }
        peerDidShareDiscoveryToken(peer: peer, token: discoveryToken)
    }
    
    /// NIN ÌÜµÏã†ÏùÑ ÏúÑÌïú discoveryToken Í≥µÏú†
    func shareMyDiscoveryToken(token: NIDiscoveryToken) {
        print("shareMyDiscoveryToken()")
        guard let encodedData = try?  NSKeyedArchiver.archivedData(withRootObject: token, requiringSecureCoding: true) else {
            fatalError("Unexpectedly failed to encode discovery token.")
        }
        mpcManager?.sendDataToAllPeers(data: encodedData)
        hasSharedTokenWithPeer = true
    }
    
    /// discoveryToken Í≥µÏú†, config ÌååÏùº Ï†úÏûë, NIN ÌÜµÏã† ÏãúÏûë
    func peerDidShareDiscoveryToken(peer: MCPeerID, token: NIDiscoveryToken) {
        print("peerDidShareDiscoveryToken(\(token)")
        if connectedPeer != peer {
            #if DEBUG
            fatalError("Received token from unexpected peer.")
            #endif
        }
        // Create a configuration.
        peerDiscoveryToken = token

        let config = NINearbyPeerConfiguration(peerToken: token)

        // Run the session.
        print("run the session")
        niSession?.run(config)
    }
    
    func isNearby(_ distance: Float) -> Bool {
        return distance < nearbyDistanceThreshold
    }
    
    func createChaap(peerToken: NIDiscoveryToken) async {
        guard let location = locationManager.currentLocation else {
            print("‚ùå ÏúÑÏπò ÏóÜÏùå")
            return
        }

        await locationManager.reverseGeocode(location: location)

        // Peer ÏÉùÏÑ±
        let peer = getOrCreatePeer(for: peerToken, displayName: connectedPeer?.displayName ?? "Unknown")

        let chaap = Chaap(
            createdAt: Date(),
            place: LocationManager.shared.currentAddress,
            latitude: location.coordinate.latitude,
            longitude: location.coordinate.longitude,
            title: nil,
            memo: nil,
            photoData: nil,
            peers: [peer]
        )

        do {
            modelContext.insert(chaap)
            try modelContext.save()
            print("‚úÖ Chaap Ï†ÄÏû• ÏÑ±Í≥µ (token Í∏∞Î∞ò)")
        } catch {
            print("‚ùå Chaap Ï†ÄÏû• Ïã§Ìå®: \(error.localizedDescription)")
        }
    }
    
    func getOrCreatePeer(for token: NIDiscoveryToken, displayName: String) -> Peer {
        let tokenID = Peer.tokenToString(token)

        if let existing = try? modelContext.fetch(FetchDescriptor<Peer>(predicate: #Predicate { $0.tokenString == tokenID })).first {
            return existing
        } else {
            let newPeer = Peer(token: token, displayName: displayName)
            modelContext.insert(newPeer)
            return newPeer
        }
    }
    
    func acceptInvitation() {
        guard let pending = mpcManager?.pendingInvitation else { return }
        pending.handler(true, mpcManager?.mcSession)
        mpcManager?.pendingInvitation = nil
    }

    func rejectInvitation() {
        guard let pending = mpcManager?.pendingInvitation else { return }
        pending.handler(false, nil)
        mpcManager?.pendingInvitation = nil
    }
    
    func resetSessionState() {
        print("üîÑ ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî")
        niSession = nil
        peerDiscoveryToken = nil
        distance = nil
        currentDistanceState = .unknown
        connectedPeer = nil
        isConnectedWithPeer = false
        hasCreatedChaap = false
    }
}

extension ChaappingViewModel: NISessionDelegate {
    func session(_ session: NISession, didUpdate nearbyObjects: [NINearbyObject]) {
        guard let peerToken = peerDiscoveryToken else {
            fatalError("don't have peer token")
        }
        
        /// discoveryTokenÏùÑ ÏÇ¨Ïö©Ìï¥ÏÑú peer ÌôïÏù∏
        let peerObj = nearbyObjects.first { (obj) -> Bool in
            return obj.discoveryToken == peerToken
        }

        guard let nearbyObjectUpdate = peerObj else {
            return
        }
        
        self.distance = nearbyObjectUpdate.distance
        
        if let distance = nearbyObjectUpdate.distance {
            self.distance = distance
            
            if isNearby(distance), !hasCreatedChaap {
                hasCreatedChaap = true
                Task {
                    await createChaap(peerToken: peerToken)
                    stopNI()
                    stopMPC()
                    resetSessionState()
                }
            }
        }
    }

    func session(_ session: NISession, didRemove nearbyObjects: [NINearbyObject], reason: NINearbyObject.RemovalReason) {
        print("NISession didRemove")
        guard let peerToken = peerDiscoveryToken else {
            fatalError("don't have peer token")
        }
        // Find the right peer.
        let peerObj = nearbyObjects.first { (obj) -> Bool in
            return obj.discoveryToken == peerToken
        }

        if peerObj == nil {
            return
        }

        currentDistanceState = .unknown
        
        // ÌîºÏñ¥ Ïó∞Í≤∞Ìï¥Ï†ú ÏõêÏù∏
        switch reason {
        case .peerEnded:
            // The peer token is no longer valid.
            peerDiscoveryToken = nil
 
            session.invalidate()
            
            // Restart the sequence to see if the peer comes back.
            startNI()

        case .timeout:
            
            // The peer timed out, but the session is valid.
            // If the configuration is valid, run the session again.
            if let config = session.configuration {
                session.run(config)
            }
        default:
            fatalError("Unknown and unhandled NINearbyObject.RemovalReason")
        }
    }
    
    func session(_ session: NISession, didInvalidateWith error: Error) {
        currentDistanceState = .unknown
        
        if case NIError.userDidNotAllow = error {
            if #available(iOS 15.0, *) {

                let accessAlert = UIAlertController(title: "Access Required",
                                                    message: """
                                                    NIPeekaboo requires access to Nearby Interactions for this sample app.
                                                    Use this string to explain to users which functionality will be enabled if they change
                                                    Nearby Interactions access in Settings.
                                                    """,
                                                    preferredStyle: .alert)
                accessAlert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
                accessAlert.addAction(UIAlertAction(title: "Go to Settings", style: .default, handler: {_ in
                    if let settingsURL = URL(string: UIApplication.openSettingsURLString) {
                        UIApplication.shared.open(settingsURL, options: [:], completionHandler: nil)
                    }
                }))
                
            } else {

            }
            
            return
        }
    }
}
